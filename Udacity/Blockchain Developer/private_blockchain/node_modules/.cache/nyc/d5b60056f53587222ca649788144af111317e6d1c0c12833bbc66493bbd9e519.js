var cov_2n3fs5wc0i=function(){var path="/Users/rebeccajohnson/Education/Udacity/Blockchain Developer/private_blockchain/src/blockchain.js";var hash="4ff9f0da07909f344e3b19bbd6d212dfe138854b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/rebeccajohnson/Education/Udacity/Blockchain Developer/private_blockchain/src/blockchain.js",statementMap:{"0":{start:{line:11,column:15},end:{line:11,column:42}},"1":{start:{line:12,column:19},end:{line:12,column:40}},"2":{start:{line:13,column:23},end:{line:13,column:51}},"3":{start:{line:14,column:22},end:{line:14,column:25}},"4":{start:{line:27,column:4},end:{line:27,column:20}},"5":{start:{line:28,column:4},end:{line:28,column:21}},"6":{start:{line:29,column:4},end:{line:29,column:27}},"7":{start:{line:38,column:4},end:{line:41,column:5}},"8":{start:{line:39,column:18},end:{line:39,column:65}},"9":{start:{line:40,column:6},end:{line:40,column:34}},"10":{start:{line:48,column:4},end:{line:50,column:7}},"11":{start:{line:49,column:6},end:{line:49,column:27}},"12":{start:{line:66,column:15},end:{line:66,column:19}},"13":{start:{line:68,column:4},end:{line:98,column:7}},"14":{start:{line:69,column:6},end:{line:96,column:7}},"15":{start:{line:71,column:8},end:{line:71,column:41}},"16":{start:{line:74,column:8},end:{line:74,column:66}},"17":{start:{line:77,column:8},end:{line:79,column:9}},"18":{start:{line:78,column:10},end:{line:78,column:75}},"19":{start:{line:82,column:8},end:{line:82,column:62}},"20":{start:{line:85,column:8},end:{line:85,column:38}},"21":{start:{line:87,column:8},end:{line:87,column:31}},"22":{start:{line:89,column:8},end:{line:93,column:9}},"23":{start:{line:90,column:10},end:{line:90,column:24}},"24":{start:{line:92,column:10},end:{line:92,column:41}},"25":{start:{line:95,column:8},end:{line:95,column:56}},"26":{start:{line:110,column:4},end:{line:113,column:7}},"27":{start:{line:112,column:6},end:{line:112,column:88}},"28":{start:{line:134,column:15},end:{line:134,column:19}},"29":{start:{line:135,column:4},end:{line:156,column:7}},"30":{start:{line:137,column:24},end:{line:137,column:55}},"31":{start:{line:138,column:24},end:{line:138,column:78}},"32":{start:{line:139,column:21},end:{line:139,column:46}},"33":{start:{line:141,column:6},end:{line:154,column:7}},"34":{start:{line:142,column:23},end:{line:142,column:73}},"35":{start:{line:143,column:8},end:{line:150,column:9}},"36":{start:{line:144,column:22},end:{line:144,column:74}},"37":{start:{line:145,column:10},end:{line:145,column:32}},"38":{start:{line:146,column:10},end:{line:146,column:25}},"39":{start:{line:149,column:10},end:{line:149,column:56}},"40":{start:{line:153,column:8},end:{line:153,column:87}},"41":{start:{line:167,column:15},end:{line:167,column:19}},"42":{start:{line:169,column:4},end:{line:179,column:7}},"43":{start:{line:171,column:18},end:{line:171,column:79}},"44":{start:{line:171,column:45},end:{line:171,column:75}},"45":{start:{line:173,column:6},end:{line:178,column:7}},"46":{start:{line:174,column:8},end:{line:174,column:23}},"47":{start:{line:177,column:8},end:{line:177,column:22}},"48":{start:{line:188,column:15},end:{line:188,column:19}},"49":{start:{line:189,column:4},end:{line:196,column:7}},"50":{start:{line:190,column:18},end:{line:190,column:64}},"51":{start:{line:190,column:41},end:{line:190,column:60}},"52":{start:{line:191,column:6},end:{line:195,column:7}},"53":{start:{line:192,column:8},end:{line:192,column:23}},"54":{start:{line:194,column:8},end:{line:194,column:22}},"55":{start:{line:206,column:15},end:{line:206,column:19}},"56":{start:{line:207,column:16},end:{line:207,column:18}},"57":{start:{line:209,column:4},end:{line:223,column:7}},"58":{start:{line:211,column:6},end:{line:219,column:9}},"59":{start:{line:213,column:8},end:{line:217,column:52}},"60":{start:{line:214,column:10},end:{line:216,column:11}},"61":{start:{line:215,column:12},end:{line:215,column:29}},"62":{start:{line:217,column:30},end:{line:217,column:48}},"63":{start:{line:221,column:6},end:{line:221,column:21}},"64":{start:{line:222,column:6},end:{line:222,column:77}},"65":{start:{line:233,column:15},end:{line:233,column:19}},"66":{start:{line:234,column:19},end:{line:234,column:21}},"67":{start:{line:236,column:4},end:{line:251,column:7}},"68":{start:{line:237,column:6},end:{line:250,column:7}},"69":{start:{line:238,column:8},end:{line:245,column:9}},"70":{start:{line:239,column:10},end:{line:244,column:11}},"71":{start:{line:240,column:12},end:{line:240,column:87}},"72":{start:{line:242,column:12},end:{line:242,column:70}},"73":{start:{line:243,column:12},end:{line:243,column:107}},"74":{start:{line:246,column:8},end:{line:246,column:30}},"75":{start:{line:249,column:8},end:{line:249,column:34}},"76":{start:{line:257,column:12},end:{line:257,column:28}},"77":{start:{line:259,column:0},end:{line:259,column:89}},"78":{start:{line:261,column:0},end:{line:261,column:23}},"79":{start:{line:263,column:0},end:{line:263,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:26,column:16},end:{line:30,column:3}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:2},end:{line:37,column:3}},loc:{start:{line:37,column:26},end:{line:42,column:3}},line:37},"2":{name:"(anonymous_2)",decl:{start:{line:47,column:2},end:{line:47,column:3}},loc:{start:{line:47,column:19},end:{line:51,column:3}},line:47},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:23},end:{line:48,column:24}},loc:{start:{line:48,column:44},end:{line:50,column:5}},line:48},"4":{name:"(anonymous_4)",decl:{start:{line:65,column:2},end:{line:65,column:3}},loc:{start:{line:65,column:19},end:{line:99,column:3}},line:65},"5":{name:"(anonymous_5)",decl:{start:{line:68,column:23},end:{line:68,column:24}},loc:{start:{line:68,column:50},end:{line:98,column:5}},line:68},"6":{name:"(anonymous_6)",decl:{start:{line:109,column:2},end:{line:109,column:3}},loc:{start:{line:109,column:47},end:{line:114,column:3}},line:109},"7":{name:"(anonymous_7)",decl:{start:{line:110,column:23},end:{line:110,column:24}},loc:{start:{line:110,column:36},end:{line:113,column:5}},line:110},"8":{name:"(anonymous_8)",decl:{start:{line:133,column:2},end:{line:133,column:3}},loc:{start:{line:133,column:48},end:{line:157,column:3}},line:133},"9":{name:"(anonymous_9)",decl:{start:{line:135,column:23},end:{line:135,column:24}},loc:{start:{line:135,column:50},end:{line:156,column:5}},line:135},"10":{name:"(anonymous_10)",decl:{start:{line:166,column:2},end:{line:166,column:3}},loc:{start:{line:166,column:23},end:{line:180,column:3}},line:166},"11":{name:"(anonymous_11)",decl:{start:{line:169,column:23},end:{line:169,column:24}},loc:{start:{line:169,column:44},end:{line:179,column:5}},line:169},"12":{name:"(anonymous_12)",decl:{start:{line:171,column:36},end:{line:171,column:37}},loc:{start:{line:171,column:45},end:{line:171,column:75}},line:171},"13":{name:"(anonymous_13)",decl:{start:{line:187,column:2},end:{line:187,column:3}},loc:{start:{line:187,column:27},end:{line:197,column:3}},line:187},"14":{name:"(anonymous_14)",decl:{start:{line:189,column:23},end:{line:189,column:24}},loc:{start:{line:189,column:44},end:{line:196,column:5}},line:189},"15":{name:"(anonymous_15)",decl:{start:{line:190,column:36},end:{line:190,column:37}},loc:{start:{line:190,column:41},end:{line:190,column:60}},line:190},"16":{name:"(anonymous_16)",decl:{start:{line:205,column:2},end:{line:205,column:3}},loc:{start:{line:205,column:35},end:{line:224,column:3}},line:205},"17":{name:"(anonymous_17)",decl:{start:{line:209,column:23},end:{line:209,column:24}},loc:{start:{line:209,column:44},end:{line:223,column:5}},line:209},"18":{name:"(anonymous_18)",decl:{start:{line:211,column:25},end:{line:211,column:26}},loc:{start:{line:211,column:36},end:{line:219,column:7}},line:211},"19":{name:"(anonymous_19)",decl:{start:{line:213,column:30},end:{line:213,column:31}},loc:{start:{line:213,column:40},end:{line:217,column:9}},line:213},"20":{name:"(anonymous_20)",decl:{start:{line:217,column:17},end:{line:217,column:18}},loc:{start:{line:217,column:28},end:{line:217,column:50}},line:217},"21":{name:"(anonymous_21)",decl:{start:{line:232,column:2},end:{line:232,column:3}},loc:{start:{line:232,column:18},end:{line:252,column:3}},line:232},"22":{name:"(anonymous_22)",decl:{start:{line:236,column:23},end:{line:236,column:24}},loc:{start:{line:236,column:50},end:{line:251,column:5}},line:236}},branchMap:{"0":{loc:{start:{line:38,column:4},end:{line:41,column:5}},type:"if",locations:[{start:{line:38,column:4},end:{line:41,column:5}},{start:{line:38,column:4},end:{line:41,column:5}}],line:38},"1":{loc:{start:{line:77,column:8},end:{line:79,column:9}},type:"if",locations:[{start:{line:77,column:8},end:{line:79,column:9}},{start:{line:77,column:8},end:{line:79,column:9}}],line:77},"2":{loc:{start:{line:89,column:8},end:{line:93,column:9}},type:"if",locations:[{start:{line:89,column:8},end:{line:93,column:9}},{start:{line:89,column:8},end:{line:93,column:9}}],line:89},"3":{loc:{start:{line:141,column:6},end:{line:154,column:7}},type:"if",locations:[{start:{line:141,column:6},end:{line:154,column:7}},{start:{line:141,column:6},end:{line:154,column:7}}],line:141},"4":{loc:{start:{line:143,column:8},end:{line:150,column:9}},type:"if",locations:[{start:{line:143,column:8},end:{line:150,column:9}},{start:{line:143,column:8},end:{line:150,column:9}}],line:143},"5":{loc:{start:{line:173,column:6},end:{line:178,column:7}},type:"if",locations:[{start:{line:173,column:6},end:{line:178,column:7}},{start:{line:173,column:6},end:{line:178,column:7}}],line:173},"6":{loc:{start:{line:191,column:6},end:{line:195,column:7}},type:"if",locations:[{start:{line:191,column:6},end:{line:195,column:7}},{start:{line:191,column:6},end:{line:195,column:7}}],line:191},"7":{loc:{start:{line:214,column:10},end:{line:216,column:11}},type:"if",locations:[{start:{line:214,column:10},end:{line:216,column:11}},{start:{line:214,column:10},end:{line:216,column:11}}],line:214},"8":{loc:{start:{line:239,column:10},end:{line:244,column:11}},type:"if",locations:[{start:{line:239,column:10},end:{line:244,column:11}},{start:{line:239,column:10},end:{line:244,column:11}}],line:239},"9":{loc:{start:{line:240,column:12},end:{line:240,column:86}},type:"cond-expr",locations:[{start:{line:240,column:36},end:{line:240,column:40}},{start:{line:240,column:43},end:{line:240,column:86}}],line:240},"10":{loc:{start:{line:242,column:12},end:{line:242,column:69}},type:"cond-expr",locations:[{start:{line:242,column:36},end:{line:242,column:40}},{start:{line:242,column:43},end:{line:242,column:69}}],line:242},"11":{loc:{start:{line:243,column:12},end:{line:243,column:107}},type:"cond-expr",locations:[{start:{line:243,column:74},end:{line:243,column:78}},{start:{line:243,column:81},end:{line:243,column:107}}],line:243}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"4ff9f0da07909f344e3b19bbd6d212dfe138854b"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/**
 *                          Blockchain Class
 *  The Blockchain class contain the basics functions to create your own private blockchain
 *  It uses libraries like `crypto-js` to create the hashes for each block and `bitcoinjs-message`
 *  to verify a message signature. The chain is stored in the array
 *  `this.chain = [];`. Of course each time you run the application the chain will be empty because and array
 *  isn't a persisten storage method.
 *
 */const SHA256=(cov_2n3fs5wc0i.s[0]++,require('crypto-js/sha256'));const BlockClass=(cov_2n3fs5wc0i.s[1]++,require('./block.js'));const bitcoinMessage=(cov_2n3fs5wc0i.s[2]++,require('bitcoinjs-message'));const TIME_INTERVAL=(cov_2n3fs5wc0i.s[3]++,300);// Declacr un const contain the time interval 5 minutes * 60 Sec = 300 sec
class Blockchain{/**
   * Constructor of the class, you will need to setup your chain array and the height
   * of your chain (the length of your chain array).
   * Also everytime you create a Blockchain class you will need to initialized the chain creating
   * the Genesis Block.
   * The methods in this class will always return a Promise to allow client applications or
   * other backends to call asynchronous functions.
   */constructor(){cov_2n3fs5wc0i.f[0]++;cov_2n3fs5wc0i.s[4]++;this.chain=[];cov_2n3fs5wc0i.s[5]++;this.height=-1;cov_2n3fs5wc0i.s[6]++;this.initializeChain();}/**
   * This method will check for the height of the chain and if there isn't a Genesis Block it will create it.
   * You should use the `addBlock(block)` to create the Genesis Block
   * Passing as a data `{data: 'Genesis Block'}`
   */async initializeChain(){cov_2n3fs5wc0i.f[1]++;cov_2n3fs5wc0i.s[7]++;if(this.height===-1){cov_2n3fs5wc0i.b[0][0]++;let block=(cov_2n3fs5wc0i.s[8]++,new BlockClass.Block({data:'Genesis Block'}));cov_2n3fs5wc0i.s[9]++;await this._addBlock(block);}else{cov_2n3fs5wc0i.b[0][1]++;}}/**
   * Utility method that return a Promise that will resolve with the height of the chain
   */getChainHeight(){cov_2n3fs5wc0i.f[2]++;cov_2n3fs5wc0i.s[10]++;return new Promise((resolve,reject)=>{cov_2n3fs5wc0i.f[3]++;cov_2n3fs5wc0i.s[11]++;resolve(this.height);});}/**
   * _addBlock(block) will store a block in the chain
   * @param {*} block
   * The method will return a Promise that will resolve with the block added
   * or reject if an error happen during the execution.
   * You will need to check for the height to assign the `previousBlockHash`,
   * assign the `timestamp` and the correct `height`...At the end you need to
   * create the `block hash` and push the block into the chain array. Don't for get
   * to update the `this.height`
   * Note: the symbol `_` in the method name indicates in the javascript convention
   * that this method is a private method.
   */_addBlock(block){cov_2n3fs5wc0i.f[4]++;let self=(cov_2n3fs5wc0i.s[12]++,this);cov_2n3fs5wc0i.s[13]++;return new Promise(async(resolve,reject)=>{cov_2n3fs5wc0i.f[5]++;cov_2n3fs5wc0i.s[14]++;try{cov_2n3fs5wc0i.s[15]++;// block height
block.height=this.chain.length;// UTC timestamp
cov_2n3fs5wc0i.s[16]++;block.time=new Date().getTime().toString().slice(0,-3);// Skip the Genesis block - set block previous hash
cov_2n3fs5wc0i.s[17]++;if(self.height!=-1){cov_2n3fs5wc0i.b[1][0]++;cov_2n3fs5wc0i.s[18]++;block.previousBlockHash=this.chain[this.chain.length-1].hash;}else{cov_2n3fs5wc0i.b[1][1]++;}// blocK hash
cov_2n3fs5wc0i.s[19]++;block.hash=SHA256(JSON.stringify(block)).toString();// update this.height
cov_2n3fs5wc0i.s[20]++;self.height=this.height+1;// add block to chain
cov_2n3fs5wc0i.s[21]++;self.chain.push(block);cov_2n3fs5wc0i.s[22]++;if(block){cov_2n3fs5wc0i.b[2][0]++;cov_2n3fs5wc0i.s[23]++;resolve(block);}else{cov_2n3fs5wc0i.b[2][1]++;cov_2n3fs5wc0i.s[24]++;reject('error adding a block');}}catch(error){cov_2n3fs5wc0i.s[25]++;return res.status(500).send("Block not added!");}});}/**
   * The requestMessageOwnershipVerification(address) method
   * will allow you  to request a message that you will use to
   * sign it with your Bitcoin Wallet (Electrum or Bitcoin Core)
   * This is the first step before submit your Block.
   * The method return a Promise that will resolve with the message to be signed
   * @param {*} address
   */requestMessageOwnershipVerification(address){cov_2n3fs5wc0i.f[6]++;cov_2n3fs5wc0i.s[26]++;return new Promise(resolve=>{cov_2n3fs5wc0i.f[7]++;cov_2n3fs5wc0i.s[27]++;resolve(address+`:${new Date().getTime().toString().slice(0,-3)}:starRegistry`);});}/**
   * The submitStar(address, message, signature, star) method
   * will allow users to register a new Block with the star object
   * into the chain. This method will resolve with the Block added or
   * reject with an error.
   * Algorithm steps:
   * 1. Get the time from the message sent as a parameter example: `parseInt(message.split(':')[1])`
   * 2. Get the current time: `let currentTime = parseInt(new Date().getTime().toString().slice(0, -3));`
   * 3. Check if the time elapsed is less than 5 minutes
   * 4. Veify the message with wallet address and signature: `bitcoinMessage.verify(message, address, signature)`
   * 5. Create the block and add it to the chain
   * 6. Resolve with the block added.
   * @param {*} address
   * @param {*} message
   * @param {*} signature
   * @param {*} star
   */submitStar(address,message,signature,star){cov_2n3fs5wc0i.f[8]++;let self=(cov_2n3fs5wc0i.s[28]++,this);cov_2n3fs5wc0i.s[29]++;return new Promise(async(resolve,reject)=>{cov_2n3fs5wc0i.f[9]++;let messageTime=(cov_2n3fs5wc0i.s[30]++,parseInt(message.split(':')[1]));let currentTime=(cov_2n3fs5wc0i.s[31]++,parseInt(new Date().getTime().toString().slice(0,-3)));let timeDiff=(cov_2n3fs5wc0i.s[32]++,currentTime-messageTime);cov_2n3fs5wc0i.s[33]++;if(timeDiff<=TIME_INTERVAL){cov_2n3fs5wc0i.b[3][0]++;let verified=(cov_2n3fs5wc0i.s[34]++,bitcoinMessage.verify(message,address,signature));cov_2n3fs5wc0i.s[35]++;if(verified){cov_2n3fs5wc0i.b[4][0]++;let block=(cov_2n3fs5wc0i.s[36]++,new BlockClass.Block({owner:address,star:star}));cov_2n3fs5wc0i.s[37]++;self._addBlock(block);cov_2n3fs5wc0i.s[38]++;resolve(block);}else{cov_2n3fs5wc0i.b[4][1]++;cov_2n3fs5wc0i.s[39]++;reject('Please verify the message signature');}}else{cov_2n3fs5wc0i.b[3][1]++;cov_2n3fs5wc0i.s[40]++;reject('The time elpased since the message request is greater than 5 minutes');}});}/**
   * This method will return a Promise that will resolve with the Block
   *  with the hash passed as a parameter.
   * Search on the chain array for the block that has the hash.
   * @param {*} hash
   */getBlockByHash(hash){cov_2n3fs5wc0i.f[10]++;let self=(cov_2n3fs5wc0i.s[41]++,this);cov_2n3fs5wc0i.s[42]++;return new Promise((resolve,reject)=>{cov_2n3fs5wc0i.f[11]++;let block=(cov_2n3fs5wc0i.s[43]++,self.chain.filter(value=>{cov_2n3fs5wc0i.f[12]++;cov_2n3fs5wc0i.s[44]++;return value.hash===hash.toString();})[0]);cov_2n3fs5wc0i.s[45]++;if(block){cov_2n3fs5wc0i.b[5][0]++;cov_2n3fs5wc0i.s[46]++;resolve(block);}else{cov_2n3fs5wc0i.b[5][1]++;cov_2n3fs5wc0i.s[47]++;resolve(null);}});}/**
   * This method will return a Promise that will resolve with the Block object
   * with the height equal to the parameter `height`
   * @param {*} height
   */getBlockByHeight(height){cov_2n3fs5wc0i.f[13]++;let self=(cov_2n3fs5wc0i.s[48]++,this);cov_2n3fs5wc0i.s[49]++;return new Promise((resolve,reject)=>{cov_2n3fs5wc0i.f[14]++;let block=(cov_2n3fs5wc0i.s[50]++,self.chain.filter(p=>{cov_2n3fs5wc0i.f[15]++;cov_2n3fs5wc0i.s[51]++;return p.height===height;})[0]);cov_2n3fs5wc0i.s[52]++;if(block){cov_2n3fs5wc0i.b[6][0]++;cov_2n3fs5wc0i.s[53]++;resolve(block);}else{cov_2n3fs5wc0i.b[6][1]++;cov_2n3fs5wc0i.s[54]++;resolve(null);}});}/**
   * This method will return a Promise that will resolve with an array of Stars objects existing in the chain
   * and are belongs to the owner with the wallet address passed as parameter.
   * Remember the star should be returned decoded.
   * @param {*} address
   */getStarsByWalletAddress(address){cov_2n3fs5wc0i.f[16]++;let self=(cov_2n3fs5wc0i.s[55]++,this);let stars=(cov_2n3fs5wc0i.s[56]++,[]);cov_2n3fs5wc0i.s[57]++;return new Promise((resolve,reject)=>{cov_2n3fs5wc0i.f[17]++;cov_2n3fs5wc0i.s[58]++;self.chain.forEach(block=>{cov_2n3fs5wc0i.f[18]++;cov_2n3fs5wc0i.s[59]++;block.getBData().then(data=>{cov_2n3fs5wc0i.f[19]++;cov_2n3fs5wc0i.s[60]++;if(data.owner===address){cov_2n3fs5wc0i.b[7][0]++;cov_2n3fs5wc0i.s[61]++;stars.push(data);}else{cov_2n3fs5wc0i.b[7][1]++;}}).catch(error=>{cov_2n3fs5wc0i.f[20]++;cov_2n3fs5wc0i.s[62]++;console.log(error);});});cov_2n3fs5wc0i.s[63]++;resolve(stars);cov_2n3fs5wc0i.s[64]++;reject('This owner address does not have any star in this BlockChain');});}/**
   * This method will return a Promise that will resolve with the list of errors when validating the chain.
   * Steps to validate:
   * 1. You should validate each block using `validateBlock`
   * 2. Each Block should check the with the previousBlockHash
   */validateChain(){cov_2n3fs5wc0i.f[21]++;let self=(cov_2n3fs5wc0i.s[65]++,this);let errorLog=(cov_2n3fs5wc0i.s[66]++,[]);cov_2n3fs5wc0i.s[67]++;return new Promise(async(resolve,reject)=>{cov_2n3fs5wc0i.f[22]++;cov_2n3fs5wc0i.s[68]++;try{cov_2n3fs5wc0i.s[69]++;for(let item of self.chain){cov_2n3fs5wc0i.s[70]++;if(item.height===0){cov_2n3fs5wc0i.b[8][0]++;cov_2n3fs5wc0i.s[71]++;(await item.validate())?(cov_2n3fs5wc0i.b[9][0]++,true):(cov_2n3fs5wc0i.b[9][1]++,errorLog.push("Genesis block is not valid"));}else{cov_2n3fs5wc0i.b[8][1]++;cov_2n3fs5wc0i.s[72]++;(await item.validate())?(cov_2n3fs5wc0i.b[10][0]++,true):(cov_2n3fs5wc0i.b[10][1]++,errorLog.push(item.height));cov_2n3fs5wc0i.s[73]++;item.previousBlockHash===self.chain[item.height-1].hash?(cov_2n3fs5wc0i.b[11][0]++,true):(cov_2n3fs5wc0i.b[11][1]++,errorLog.push(item.height));}}cov_2n3fs5wc0i.s[74]++;await item.validate();}catch(e){cov_2n3fs5wc0i.s[75]++;errorLog.push(item.height);}});}}// Variable code for testing individual funtions. 
const obj=(cov_2n3fs5wc0i.s[76]++,new Blockchain());cov_2n3fs5wc0i.s[77]++;obj._addBlock(new BlockClass.Block({owner:"I am who am",star:{"test":"test1"}}));cov_2n3fs5wc0i.s[78]++;console.log(obj.chain);cov_2n3fs5wc0i.s[79]++;module.exports.Blockchain=Blockchain;