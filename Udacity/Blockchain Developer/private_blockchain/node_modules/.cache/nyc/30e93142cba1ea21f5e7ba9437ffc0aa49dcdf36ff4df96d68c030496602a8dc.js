var cov_28ta12smrz=function(){var path="/Users/Picchu/Documents/private_blockchain/src/blockchain.js";var hash="abdfa2fc7aeebf8edd15312f70d43fda122497d2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/Picchu/Documents/private_blockchain/src/blockchain.js",statementMap:{"0":{start:{line:11,column:15},end:{line:11,column:42}},"1":{start:{line:12,column:19},end:{line:12,column:40}},"2":{start:{line:13,column:23},end:{line:13,column:51}},"3":{start:{line:14,column:22},end:{line:14,column:25}},"4":{start:{line:27,column:8},end:{line:27,column:24}},"5":{start:{line:28,column:8},end:{line:28,column:25}},"6":{start:{line:29,column:8},end:{line:29,column:31}},"7":{start:{line:38,column:8},end:{line:41,column:9}},"8":{start:{line:39,column:24},end:{line:39,column:69}},"9":{start:{line:40,column:12},end:{line:40,column:40}},"10":{start:{line:48,column:8},end:{line:50,column:11}},"11":{start:{line:49,column:12},end:{line:49,column:33}},"12":{start:{line:66,column:19},end:{line:66,column:23}},"13":{start:{line:68,column:8},end:{line:92,column:11}},"14":{start:{line:71,column:10},end:{line:71,column:43}},"15":{start:{line:74,column:10},end:{line:74,column:67}},"16":{start:{line:77,column:10},end:{line:79,column:11}},"17":{start:{line:78,column:12},end:{line:78,column:77}},"18":{start:{line:82,column:10},end:{line:82,column:64}},"19":{start:{line:85,column:10},end:{line:85,column:39}},"20":{start:{line:87,column:10},end:{line:87,column:33}},"21":{start:{line:89,column:10},end:{line:89,column:25}},"22":{start:{line:90,column:10},end:{line:90,column:41}},"23":{start:{line:104,column:8},end:{line:107,column:11}},"24":{start:{line:106,column:10},end:{line:106,column:93}},"25":{start:{line:128,column:19},end:{line:128,column:23}},"26":{start:{line:129,column:8},end:{line:150,column:11}},"27":{start:{line:131,column:28},end:{line:131,column:59}},"28":{start:{line:132,column:28},end:{line:132,column:82}},"29":{start:{line:133,column:25},end:{line:133,column:50}},"30":{start:{line:135,column:10},end:{line:148,column:11}},"31":{start:{line:136,column:27},end:{line:136,column:77}},"32":{start:{line:137,column:12},end:{line:144,column:13}},"33":{start:{line:138,column:26},end:{line:138,column:77}},"34":{start:{line:139,column:14},end:{line:139,column:36}},"35":{start:{line:140,column:14},end:{line:140,column:30}},"36":{start:{line:143,column:14},end:{line:143,column:60}},"37":{start:{line:147,column:12},end:{line:147,column:91}},"38":{start:{line:161,column:19},end:{line:161,column:23}},"39":{start:{line:163,column:8},end:{line:173,column:11}},"40":{start:{line:165,column:22},end:{line:165,column:83}},"41":{start:{line:165,column:49},end:{line:165,column:79}},"42":{start:{line:167,column:10},end:{line:172,column:11}},"43":{start:{line:168,column:12},end:{line:168,column:27}},"44":{start:{line:171,column:12},end:{line:171,column:26}},"45":{start:{line:182,column:19},end:{line:182,column:23}},"46":{start:{line:183,column:8},end:{line:190,column:11}},"47":{start:{line:184,column:24},end:{line:184,column:70}},"48":{start:{line:184,column:47},end:{line:184,column:66}},"49":{start:{line:185,column:12},end:{line:189,column:13}},"50":{start:{line:186,column:16},end:{line:186,column:31}},"51":{start:{line:188,column:16},end:{line:188,column:30}},"52":{start:{line:200,column:19},end:{line:200,column:23}},"53":{start:{line:201,column:20},end:{line:201,column:22}},"54":{start:{line:203,column:8},end:{line:217,column:11}},"55":{start:{line:205,column:10},end:{line:213,column:13}},"56":{start:{line:207,column:14},end:{line:211,column:54}},"57":{start:{line:208,column:14},end:{line:210,column:15}},"58":{start:{line:209,column:16},end:{line:209,column:33}},"59":{start:{line:211,column:33},end:{line:211,column:51}},"60":{start:{line:215,column:10},end:{line:215,column:25}},"61":{start:{line:216,column:10},end:{line:216,column:81}},"62":{start:{line:227,column:15},end:{line:227,column:19}},"63":{start:{line:228,column:19},end:{line:228,column:21}},"64":{start:{line:230,column:4},end:{line:240,column:7}},"65":{start:{line:231,column:6},end:{line:238,column:7}},"66":{start:{line:232,column:8},end:{line:237,column:9}},"67":{start:{line:233,column:10},end:{line:233,column:85}},"68":{start:{line:235,column:10},end:{line:235,column:68}},"69":{start:{line:236,column:10},end:{line:236,column:105}},"70":{start:{line:239,column:6},end:{line:239,column:23}},"71":{start:{line:245,column:0},end:{line:245,column:39}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:18},end:{line:30,column:5}},line:26},"1":{name:"(anonymous_1)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:28},end:{line:42,column:5}},line:37},"2":{name:"(anonymous_2)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:21},end:{line:51,column:5}},line:47},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:27},end:{line:48,column:28}},loc:{start:{line:48,column:48},end:{line:50,column:9}},line:48},"4":{name:"(anonymous_4)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:21},end:{line:93,column:5}},line:65},"5":{name:"(anonymous_5)",decl:{start:{line:68,column:27},end:{line:68,column:28}},loc:{start:{line:68,column:54},end:{line:92,column:9}},line:68},"6":{name:"(anonymous_6)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:49},end:{line:108,column:5}},line:103},"7":{name:"(anonymous_7)",decl:{start:{line:104,column:27},end:{line:104,column:28}},loc:{start:{line:104,column:40},end:{line:107,column:9}},line:104},"8":{name:"(anonymous_8)",decl:{start:{line:127,column:4},end:{line:127,column:5}},loc:{start:{line:127,column:50},end:{line:151,column:5}},line:127},"9":{name:"(anonymous_9)",decl:{start:{line:129,column:27},end:{line:129,column:28}},loc:{start:{line:129,column:54},end:{line:150,column:9}},line:129},"10":{name:"(anonymous_10)",decl:{start:{line:160,column:4},end:{line:160,column:5}},loc:{start:{line:160,column:25},end:{line:174,column:5}},line:160},"11":{name:"(anonymous_11)",decl:{start:{line:163,column:27},end:{line:163,column:28}},loc:{start:{line:163,column:48},end:{line:173,column:9}},line:163},"12":{name:"(anonymous_12)",decl:{start:{line:165,column:40},end:{line:165,column:41}},loc:{start:{line:165,column:49},end:{line:165,column:79}},line:165},"13":{name:"(anonymous_13)",decl:{start:{line:181,column:4},end:{line:181,column:5}},loc:{start:{line:181,column:29},end:{line:191,column:5}},line:181},"14":{name:"(anonymous_14)",decl:{start:{line:183,column:27},end:{line:183,column:28}},loc:{start:{line:183,column:48},end:{line:190,column:9}},line:183},"15":{name:"(anonymous_15)",decl:{start:{line:184,column:42},end:{line:184,column:43}},loc:{start:{line:184,column:47},end:{line:184,column:66}},line:184},"16":{name:"(anonymous_16)",decl:{start:{line:199,column:6},end:{line:199,column:7}},loc:{start:{line:199,column:40},end:{line:218,column:5}},line:199},"17":{name:"(anonymous_17)",decl:{start:{line:203,column:28},end:{line:203,column:29}},loc:{start:{line:203,column:50},end:{line:217,column:9}},line:203},"18":{name:"(anonymous_18)",decl:{start:{line:205,column:30},end:{line:205,column:31}},loc:{start:{line:205,column:41},end:{line:213,column:11}},line:205},"19":{name:"(anonymous_19)",decl:{start:{line:207,column:36},end:{line:207,column:37}},loc:{start:{line:207,column:46},end:{line:211,column:13}},line:207},"20":{name:"(anonymous_20)",decl:{start:{line:211,column:21},end:{line:211,column:22}},loc:{start:{line:211,column:32},end:{line:211,column:52}},line:211},"21":{name:"(anonymous_21)",decl:{start:{line:226,column:2},end:{line:226,column:3}},loc:{start:{line:226,column:18},end:{line:241,column:3}},line:226},"22":{name:"(anonymous_22)",decl:{start:{line:230,column:23},end:{line:230,column:24}},loc:{start:{line:230,column:50},end:{line:240,column:5}},line:230}},branchMap:{"0":{loc:{start:{line:38,column:8},end:{line:41,column:9}},type:"if",locations:[{start:{line:38,column:8},end:{line:41,column:9}},{start:{line:38,column:8},end:{line:41,column:9}}],line:38},"1":{loc:{start:{line:77,column:10},end:{line:79,column:11}},type:"if",locations:[{start:{line:77,column:10},end:{line:79,column:11}},{start:{line:77,column:10},end:{line:79,column:11}}],line:77},"2":{loc:{start:{line:135,column:10},end:{line:148,column:11}},type:"if",locations:[{start:{line:135,column:10},end:{line:148,column:11}},{start:{line:135,column:10},end:{line:148,column:11}}],line:135},"3":{loc:{start:{line:137,column:12},end:{line:144,column:13}},type:"if",locations:[{start:{line:137,column:12},end:{line:144,column:13}},{start:{line:137,column:12},end:{line:144,column:13}}],line:137},"4":{loc:{start:{line:167,column:10},end:{line:172,column:11}},type:"if",locations:[{start:{line:167,column:10},end:{line:172,column:11}},{start:{line:167,column:10},end:{line:172,column:11}}],line:167},"5":{loc:{start:{line:185,column:12},end:{line:189,column:13}},type:"if",locations:[{start:{line:185,column:12},end:{line:189,column:13}},{start:{line:185,column:12},end:{line:189,column:13}}],line:185},"6":{loc:{start:{line:208,column:14},end:{line:210,column:15}},type:"if",locations:[{start:{line:208,column:14},end:{line:210,column:15}},{start:{line:208,column:14},end:{line:210,column:15}}],line:208},"7":{loc:{start:{line:232,column:8},end:{line:237,column:9}},type:"if",locations:[{start:{line:232,column:8},end:{line:237,column:9}},{start:{line:232,column:8},end:{line:237,column:9}}],line:232},"8":{loc:{start:{line:233,column:10},end:{line:233,column:84}},type:"cond-expr",locations:[{start:{line:233,column:34},end:{line:233,column:38}},{start:{line:233,column:41},end:{line:233,column:84}}],line:233},"9":{loc:{start:{line:235,column:10},end:{line:235,column:67}},type:"cond-expr",locations:[{start:{line:235,column:34},end:{line:235,column:38}},{start:{line:235,column:41},end:{line:235,column:67}}],line:235},"10":{loc:{start:{line:236,column:10},end:{line:236,column:105}},type:"cond-expr",locations:[{start:{line:236,column:72},end:{line:236,column:76}},{start:{line:236,column:79},end:{line:236,column:105}}],line:236}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"abdfa2fc7aeebf8edd15312f70d43fda122497d2"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/**
 *                          Blockchain Class
 *  The Blockchain class contain the basics functions to create your own private blockchain
 *  It uses libraries like `crypto-js` to create the hashes for each block and `bitcoinjs-message`
 *  to verify a message signature. The chain is stored in the array
 *  `this.chain = [];`. Of course each time you run the application the chain will be empty because and array
 *  isn't a persisten storage method.
 *
 */const SHA256=(cov_28ta12smrz.s[0]++,require('crypto-js/sha256'));const BlockClass=(cov_28ta12smrz.s[1]++,require('./block.js'));const bitcoinMessage=(cov_28ta12smrz.s[2]++,require('bitcoinjs-message'));const TIME_INTERVAL=(cov_28ta12smrz.s[3]++,300);// Declacr un const contain the time interval 5 minutes * 60 Sec = 300 sec
class Blockchain{/**
     * Constructor of the class, you will need to setup your chain array and the height
     * of your chain (the length of your chain array).
     * Also everytime you create a Blockchain class you will need to initialized the chain creating
     * the Genesis Block.
     * The methods in this class will always return a Promise to allow client applications or
     * other backends to call asynchronous functions.
     */constructor(){cov_28ta12smrz.f[0]++;cov_28ta12smrz.s[4]++;this.chain=[];cov_28ta12smrz.s[5]++;this.height=-1;cov_28ta12smrz.s[6]++;this.initializeChain();}/**
     * This method will check for the height of the chain and if there isn't a Genesis Block it will create it.
     * You should use the `addBlock(block)` to create the Genesis Block
     * Passing as a data `{data: 'Genesis Block'}`
     */async initializeChain(){cov_28ta12smrz.f[1]++;cov_28ta12smrz.s[7]++;if(this.height===-1){cov_28ta12smrz.b[0][0]++;let block=(cov_28ta12smrz.s[8]++,new BlockClass.Block({data:'Genesis Block'}));cov_28ta12smrz.s[9]++;await this._addBlock(block);}else{cov_28ta12smrz.b[0][1]++;}}/**
     * Utility method that return a Promise that will resolve with the height of the chain
     */getChainHeight(){cov_28ta12smrz.f[2]++;cov_28ta12smrz.s[10]++;return new Promise((resolve,reject)=>{cov_28ta12smrz.f[3]++;cov_28ta12smrz.s[11]++;resolve(this.height);});}/**
     * _addBlock(block) will store a block in the chain
     * @param {*} block
     * The method will return a Promise that will resolve with the block added
     * or reject if an error happen during the execution.
     * You will need to check for the height to assign the `previousBlockHash`,
     * assign the `timestamp` and the correct `height`...At the end you need to
     * create the `block hash` and push the block into the chain array. Don't for get
     * to update the `this.height`
     * Note: the symbol `_` in the method name indicates in the javascript convention
     * that this method is a private method.
     */_addBlock(block){cov_28ta12smrz.f[4]++;let self=(cov_28ta12smrz.s[12]++,this);cov_28ta12smrz.s[13]++;return new Promise(async(resolve,reject)=>{cov_28ta12smrz.f[5]++;cov_28ta12smrz.s[14]++;// block height
block.height=this.chain.length;// UTC timestamp
cov_28ta12smrz.s[15]++;block.time=new Date().getTime().toString().slice(0,-3);// Skip the Genesis block - set block previous hash
cov_28ta12smrz.s[16]++;if(self.height!=-1){cov_28ta12smrz.b[1][0]++;cov_28ta12smrz.s[17]++;block.previousBlockHash=this.chain[this.chain.length-1].hash;}else{cov_28ta12smrz.b[1][1]++;}// blocK hash
cov_28ta12smrz.s[18]++;block.hash=SHA256(JSON.stringify(block)).toString();// update this.height
cov_28ta12smrz.s[19]++;self.height=this.height+1;// add block to chain
cov_28ta12smrz.s[20]++;self.chain.push(block);cov_28ta12smrz.s[21]++;resolve(block);cov_28ta12smrz.s[22]++;reject('error adding a block');});}/**
     * The requestMessageOwnershipVerification(address) method
     * will allow you  to request a message that you will use to
     * sign it with your Bitcoin Wallet (Electrum or Bitcoin Core)
     * This is the first step before submit your Block.
     * The method return a Promise that will resolve with the message to be signed
     * @param {*} address
     */requestMessageOwnershipVerification(address){cov_28ta12smrz.f[6]++;cov_28ta12smrz.s[23]++;return new Promise(resolve=>{cov_28ta12smrz.f[7]++;cov_28ta12smrz.s[24]++;resolve(address+`:${new Date().getTime().toString().slice(0,-3)}:starRegistry`);});}/**
     * The submitStar(address, message, signature, star) method
     * will allow users to register a new Block with the star object
     * into the chain. This method will resolve with the Block added or
     * reject with an error.
     * Algorithm steps:
     * 1. Get the time from the message sent as a parameter example: `parseInt(message.split(':')[1])`
     * 2. Get the current time: `let currentTime = parseInt(new Date().getTime().toString().slice(0, -3));`
     * 3. Check if the time elapsed is less than 5 minutes
     * 4. Veify the message with wallet address and signature: `bitcoinMessage.verify(message, address, signature)`
     * 5. Create the block and add it to the chain
     * 6. Resolve with the block added.
     * @param {*} address
     * @param {*} message
     * @param {*} signature
     * @param {*} star
     */submitStar(address,message,signature,star){cov_28ta12smrz.f[8]++;let self=(cov_28ta12smrz.s[25]++,this);cov_28ta12smrz.s[26]++;return new Promise(async(resolve,reject)=>{cov_28ta12smrz.f[9]++;let messageTime=(cov_28ta12smrz.s[27]++,parseInt(message.split(':')[1]));let currentTime=(cov_28ta12smrz.s[28]++,parseInt(new Date().getTime().toString().slice(0,-3)));let timeDiff=(cov_28ta12smrz.s[29]++,currentTime-messageTime);cov_28ta12smrz.s[30]++;if(timeDiff<=TIME_INTERVAL){cov_28ta12smrz.b[2][0]++;let verified=(cov_28ta12smrz.s[31]++,bitcoinMessage.verify(message,address,signature));cov_28ta12smrz.s[32]++;if(verified){cov_28ta12smrz.b[3][0]++;let block=(cov_28ta12smrz.s[33]++,new BlockClass.Block({owner:address,star:star}));cov_28ta12smrz.s[34]++;self._addBlock(block);cov_28ta12smrz.s[35]++;resolve(block);}else{cov_28ta12smrz.b[3][1]++;cov_28ta12smrz.s[36]++;reject('Please verify the message signature');}}else{cov_28ta12smrz.b[2][1]++;cov_28ta12smrz.s[37]++;reject('The time elpased since the message request is greater than 5 minutes');}});}/**
     * This method will return a Promise that will resolve with the Block
     *  with the hash passed as a parameter.
     * Search on the chain array for the block that has the hash.
     * @param {*} hash
     */getBlockByHash(hash){cov_28ta12smrz.f[10]++;let self=(cov_28ta12smrz.s[38]++,this);cov_28ta12smrz.s[39]++;return new Promise((resolve,reject)=>{cov_28ta12smrz.f[11]++;let block=(cov_28ta12smrz.s[40]++,self.chain.filter(value=>{cov_28ta12smrz.f[12]++;cov_28ta12smrz.s[41]++;return value.hash===hash.toString();})[0]);cov_28ta12smrz.s[42]++;if(block){cov_28ta12smrz.b[4][0]++;cov_28ta12smrz.s[43]++;resolve(block);}else{cov_28ta12smrz.b[4][1]++;cov_28ta12smrz.s[44]++;resolve(null);}});}/**
     * This method will return a Promise that will resolve with the Block object
     * with the height equal to the parameter `height`
     * @param {*} height
     */getBlockByHeight(height){cov_28ta12smrz.f[13]++;let self=(cov_28ta12smrz.s[45]++,this);cov_28ta12smrz.s[46]++;return new Promise((resolve,reject)=>{cov_28ta12smrz.f[14]++;let block=(cov_28ta12smrz.s[47]++,self.chain.filter(p=>{cov_28ta12smrz.f[15]++;cov_28ta12smrz.s[48]++;return p.height===height;})[0]);cov_28ta12smrz.s[49]++;if(block){cov_28ta12smrz.b[5][0]++;cov_28ta12smrz.s[50]++;resolve(block);}else{cov_28ta12smrz.b[5][1]++;cov_28ta12smrz.s[51]++;resolve(null);}});}/**
     * This method will return a Promise that will resolve with an array of Stars objects existing in the chain
     * and are belongs to the owner with the wallet address passed as parameter.
     * Remember the star should be returned decoded.
     * @param {*} address
     */getStarsByWalletAddress(address){cov_28ta12smrz.f[16]++;let self=(cov_28ta12smrz.s[52]++,this);let stars=(cov_28ta12smrz.s[53]++,[]);cov_28ta12smrz.s[54]++;return new Promise((resolve,reject)=>{cov_28ta12smrz.f[17]++;cov_28ta12smrz.s[55]++;self.chain.forEach(block=>{cov_28ta12smrz.f[18]++;cov_28ta12smrz.s[56]++;block.getBData().then(data=>{cov_28ta12smrz.f[19]++;cov_28ta12smrz.s[57]++;if(data.owner===address){cov_28ta12smrz.b[6][0]++;cov_28ta12smrz.s[58]++;stars.push(data);}else{cov_28ta12smrz.b[6][1]++;}}).catch(error=>{cov_28ta12smrz.f[20]++;cov_28ta12smrz.s[59]++;console.log(error);});});cov_28ta12smrz.s[60]++;resolve(stars);cov_28ta12smrz.s[61]++;reject('This owner address does not have any star in this BlockChain');});}/**
     * This method will return a Promise that will resolve with the list of errors when validating the chain.
     * Steps to validate:
     * 1. You should validate each block using `validateBlock`
     * 2. Each Block should check the with the previousBlockHash
     */validateChain(){cov_28ta12smrz.f[21]++;let self=(cov_28ta12smrz.s[62]++,this);let errorLog=(cov_28ta12smrz.s[63]++,[]);cov_28ta12smrz.s[64]++;return new Promise(async(resolve,reject)=>{cov_28ta12smrz.f[22]++;cov_28ta12smrz.s[65]++;for(let item of self.chain){cov_28ta12smrz.s[66]++;if(item.height===0){cov_28ta12smrz.b[7][0]++;cov_28ta12smrz.s[67]++;(await item.validate())?(cov_28ta12smrz.b[8][0]++,true):(cov_28ta12smrz.b[8][1]++,errorLog.push("Genesis block is not valid"));}else{cov_28ta12smrz.b[7][1]++;cov_28ta12smrz.s[68]++;(await item.validate())?(cov_28ta12smrz.b[9][0]++,true):(cov_28ta12smrz.b[9][1]++,errorLog.push(item.height));cov_28ta12smrz.s[69]++;item.previousBlockHash===self.chain[item.height-1].hash?(cov_28ta12smrz.b[10][0]++,true):(cov_28ta12smrz.b[10][1]++,errorLog.push(item.height));}}cov_28ta12smrz.s[70]++;resolve(errorLog);});}}cov_28ta12smrz.s[71]++;module.exports.Blockchain=Blockchain;